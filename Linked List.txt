Linked List:

struct Node{
    int data;
    struct Node *next;
}

struct Node *head, *mid, *end;
head = malloc(sizeof(struct Node));
mid = malloc(sizeof(struct Node));
end = malloc(sizeof(struct Node));

head->data =10;
mid->data =5;
end->data = 15;

Local var and function calls stay in stack, Dynamic var stored in heap.
Stack - int a, head, mid var pointer etc.
Heap - Head memory, mid memory.

head->next = mid;
mid->next = end;
end->next = NULL;

*************************************

Use temp to avoid losing the head node data;

struct Node *temp = head;
while(temp != NULL){
    cout<<temp->data;
    temp = temp->next;
}


int getCount(Node* head){
    struct Node * current = head;
    while(current != NULL){
        Count++;
        current = current->next;
    }
    return count;
}

LinkedList

class Node{
	
	public:
	int data;
	Node *next;

	Node(){
	    data = 0;
	    next = NULL;
	}

	Node(int data){
	    this->data = data;
	    this->next = NULL;
}

}

**********************

void addFront(Node **head, int newData)
{
	struct Node *newnode = new Node();
	or
	struct Node *newnode = malloc(sizeof(struct Node));
	newnode->data = newData;

	newnode->next = *head;
//make the new node as Head
	*head = newnode;
}

TC: O(1)

**********************

void addMiddle(Node *prevnode, newData)
{
	if(prevnode == NULL){
		cout<<"prev node cant be empty";
		return;
	}
	Node *newnode = new Node();
	newnode->data = newData;

	newnode->next = prevnode->next;
	prevnode->next = newnode;
}

TC: O(1)

**********************

void addEnd(Node **head, int newdata)
{
	Node *newnode = new Node();
	newnode->data = newdata;
//for newnode to be last node, newnode->next to be NULL.
	newnode->next = NULL;
	
//declare temp var  as Last
	Node * last = *head;

//empty list
	if(*head == NULL){
		*head = newnode;
		return;
	}

//traverse till last and change
	while(last->next !=NULL){
		last = last->next;
	}

	last->next = newnode;
	return;
}
************************
void deleteNode(struct node **head, int key)
{
      //temp is used to freeing the memory
      struct node *temp;

      //key found on the head node.
      //move to head node to the next and free the head.
      if((*head)->data == key)
      {
          temp = *head;    //backup to free the memory
          *head = (*head)->next;
          free(temp);
      }
     {
          struct node *current  = *head;
          while(current->next != NULL)
          {
              //if yes, we need to delete the current->next node
              if(current->next->data == key)
              {
                  temp = current->next;
                  //node will be disconnected from the linked list.
                  current->next = current->next->next;
                  free(temp);
                  break;
              }
              //Otherwise, move the current node and proceed
              else
                  current = current->next;
          }
      }
**************************
Delete Node in doubly list:

void deleteNode(Node **head, int key){
	Node *temp = *head;
	if(*head = NULL){
	    return;
	}
	while(temp->next != NULL){
	    if(temp->data == key){
		temp->prev->next = temp->next;
		free(temp);
	    }
	    else{
		temp = temp->next;
	    }
	temp->prev->next = NULL;
	}



}
***********************
***********************
void printList(Node *node){

	while(node != NULL){
		cout<<node->data;
		node = node->next
	}
}

************************

void main(){
	Node *Head = NULL;

	addfront(&HEAD, 5);
	addfront(&Head, 10);

	printList(Head);
}

************************
************************


Doubly:

struct DNode{
    int data;
    DNode* next;
    DNode* prev;
}

void reverse(Node *head){
    DNode * temp = NULL;
    DNode *current = head;
    while(current!=NULL){
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
        current = current->next;
    }
    current->next = NULL;
}
